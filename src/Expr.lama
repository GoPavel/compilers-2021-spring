-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
fun matchBinop (s) {
  case s of
    "+" -> infix +
  | "-" -> infix -
  | "*" -> infix *
  | "/" -> infix /
  | "%" -> infix %
  | "<" -> infix <
  | ">" -> infix >
  | "<=" -> infix <=
  | ">=" -> infix >=
  | "==" -> infix ==
  | "!=" -> infix !=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}


var bottom = 0;

fun void (cfg) { [cfg, bottom] }

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (cfg@[state, world], expr) {
  case expr of
    Assn (ref, e) ->
    case evalList (cfg, {ref, e}) of 
      [cfg@[state, world], {Ref (x), v}] -> [[state <- [x, v], world], v]
    esac
  | Seq (e1, e2) -> 
    case evalList (cfg, {e1, e2}) of
      [cfg, {v1, v2}] -> [cfg, v2]
    esac
  | Skip -> void (cfg)
  | Read (x) ->
    case readWorld (world) of
      [v, world] -> void ([state <- [x, v], world])
    esac
  | Write (e) ->
    case eval (cfg, e) of
      [cfg@[state, world], v] -> void ([state, writeWorld (v, world)])
    esac
  | If (cond, e1, e2) ->
    case eval (cfg, cond) of
      [cfg@[state, world], 0] -> eval (cfg, e2)
    | [cfg@[state, world], _] -> eval (cfg, e1)
    esac
  | While (cond, e) -> (
      fun rec (cfg) {
        case eval (cfg, cond) of
          [cfg, 0] -> cfg
        | [cfg, _] ->
          case eval (cfg, e) of 
            [cfg, _] -> rec (cfg)
          esac
        esac
      }
      void (rec (cfg))
    )
  | DoWhile (e, cond) -> (
      fun rec (cfg) {
        case eval (cfg, e) of
          [cfg, _] -> 
          case eval (cfg, cond) of
            [cfg, 0] -> cfg
          | [cfg, _] -> rec (cfg)
          esac
        esac
      }
      void (rec (cfg))
    )
  | Var (x) -> [cfg, state (x)]
  | Ref (x) -> [cfg, Ref (x)]
  | Const (v) -> [cfg, v]
  | Binop (s, e1, e2) -> 
    case evalList (cfg, {e1, e2}) of
      [cfg, {v1, v2}] -> [cfg, matchBinop (s) (v1, v2)]
    esac
  | Ignore (e) ->
    case eval (cfg, e) of
      [cfg, _] -> void (cfg)
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
