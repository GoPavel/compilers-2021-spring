-- Expression evaluator

import List;
import State;
import World;

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  failure ("evalExpr not implemented\n")
}

-- >>>>>>> 2ecfe09... [A01-A05] complete tasks
-- fun matchBinop (s) {
--   case s of
--     "+" -> infix +
--   | "-" -> infix -
--   | "*" -> infix *
--   | "/" -> infix /
--   | "%" -> infix %
--   | "<" -> infix <
--   | ">" -> infix >
--   | "<=" -> infix <=
--   | ">=" -> infix >=
--   | "==" -> infix ==
--   | "!=" -> infix !=
--   | "&&" -> infix &&
--   | "!!" -> infix !!
--   esac
-- }

-- public fun evalExpr (st, expr) {
--   case expr of
--     Var (s) -> st (s)
--   | Const (c) -> c
--   | Binop (s, le, re) -> matchBinop (s) (evalExpr (st, le),
--                                          evalExpr (st, re))
--   esac
-- }


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
